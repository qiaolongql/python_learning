1、数值取整
    注意取整和格式化不同，取整是指四舍五入，格式化是直接舍弃或保留
    内建函数round(value, ndigits)
        参数：
            value：要取整的值，可以为浮点数也可以为整数
            ndigits：正数表示要取整的小数的位数，负数表示要取整到的整数的位数
    如 round(1.23,1) 返回1.2  
       round(1.23,2) 返回1.23
       round(1.26,1) 返回1.3
       round(1234,-1) 返回1230
       round(1234,-2) 返回1200

2、使用decimal执行精确的小数计算
    因为float提供17位的精度，这对于一般的科学和工程类计算已经足够，但对于金融类业务
    会需要更精确的计算。

    对于float类型计算：
        a = 4.2
        b = 2.1
        a + b   输出6.300000000000001   产生了很小的误差

    如果希望更精确的结果，并且能接受牺牲的性能可以使用decimal:
        from decimal import Decimal
        a = Decimal('4.2')
        b = Decimal('2.1')
        a + b  返回  Decimal('6.3')
        print(a + b) 返回6.3
        *返回的Decimal对象在打印和在字符串格式化函数中使用时和普通数字一样

    decimal模块还可以控制计算中数字的位数以及四舍五入，这需要创建一个
    本地上下文环境并修改它：
        from decimal import localcontext
        a = Decimal('1.3')
        b = Decimal('1.7')
        print(a / b)  返回0.76470588...
        with localcontext() as ctx:   //创建了一个本地上下文环境ctx
            ctx.prec = 3     //取整三位小数，也可定义更多的小数位
            print(a / b)    返回0.765  